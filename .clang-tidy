---

# Disabled:
#  '-llvm-header-guard'  doesn't work with '#pragma once'
Checks: >
  -*,
  abseil-*,
  bugprone-*,
  cert-*,
  clang-diagnostic-*,
  clang-analyzer-*,
  concurrency-*,
  cppcoreguidelines-*,
  google-*,
  hicpp-*,
  llvm-*,
  misc-*,
  mpi-*
  modernize-*,
  openmp-*,
  performance-*,
  portability-*,
  readability-*,
  zircon-*,
  -misc-include-cleaner,
  -llvm-header-guard,
  -readability-redundant-declaration,
  -abseil-string-find-str-contains,
  -cert-dcl58-cpp

# Turn all the warnings from the checks above into errors.
WarningsAsErrors: '*'
HeaderFilterRegex: ''
FormatStyle: none

CheckOptions:
  - { key: readability-inconsistent-declaration-parameter-name.Strict,      value: 'true' }
  - { key: readability-identifier-naming.AbstractClassCase,                 value: CamelCase }
  - { key: readability-identifier-naming.AbstractClassPrefix,               value: 'I' }
  - { key: readability-identifier-naming.ClassCase,                         value: CamelCase }
  - { key: readability-identifier-naming.ConstexprVariableCase,             value: UPPER_CASE }
  - { key: readability-identifier-naming.ConstexprVariablePrefix,           value: '' }
  - { key: readability-identifier-naming.ConstexprVariableIgnoredRegexp,    value: 'pi|PI' }
  - { key: readability-identifier-naming.ConstexprFunctionIgnoredRegexp,    value: 'lerp' }
  - { key: readability-identifier-naming.ConstantMemberCase,                value: camelBack }
  - { key: readability-identifier-naming.ConstantMemberPrefix,              value: 'm_' }
  - { key: readability-identifier-naming.EnumConstantCase,                  value: UPPER_CASE }
  - { key: readability-identifier-naming.EnumConstantPrefix,                value: '' }
  - { key: readability-identifier-naming.FunctionCase,                      value: CamelCase }
  - { key: readability-identifier-naming.GlobalConstantCase,                value: UPPER_CASE }
  - { key: readability-identifier-naming.GlobalConstantPrefix,              value: '' }
  - { key: readability-identifier-naming.GlobalFunctionCase,                value: CamelCase }
  - { key: readability-identifier-naming.GlobalFunctionIgnoredRegexp,       value: 'lerp' }
  - { key: readability-identifier-length.MinimumVariableNameLength,         value: 3 }
  - { key: readability-identifier-length.IgnoredVariableNames,              value: 'W|a|b|c|d|t|x.*|X.*|y.*|Y.*|z.*|Z.*|u.*|v.*|i.*|j.*|k.*|m.*|n.*|N.*' }
  - { key: readability-identifier-length.MinimumParameterNameLength,        value: 3 }
  - { key: readability-identifier-length.IgnoredParameterNames,             value: 'a|b|t|x.*|y.*|z.*|i|m|n|k.*' }
  - { key: readability-identifier-length.MinimumLoopCounterNameLength,      value: 3 }
  - { key: readability-identifier-length.IgnoredLoopCounterNames,           value: 'x|y|i|j|k' }
  - { key: readability-identifier-naming.FunctionIgnoredRegexp,             value: 'lerp|at' }
  - { key: readability-identifier-naming.LocalConstantCase,                 value: camelBack }
  - { key: readability-identifier-naming.MacroDefinitionCase,               value: UPPER_CASE }
  - { key: readability-identifier-naming.MethodCase,                        value: CamelCase }
  - { key: readability-identifier-naming.NamespaceCase,                     value: UPPER_CASE }
  - { key: readability-identifier-naming.ParameterCase,                     value: camelBack }
  - { key: readability-identifier-naming.PrivateMemberPrefix,               value: 'm_' }
  - { key: readability-identifier-naming.ProtectedMemberPrefix,             value: 'm_' }
  - { key: readability-identifier-naming.PublicMemberPrefix,                value: '' }
  - { key: readability-identifier-naming.ScopedEnumConstantCase,            value: UPPER_CASE }
  - { key: readability-identifier-naming.ScopedEnumConstantPrefix,          value: '' }
  - { key: readability-identifier-naming.StaticConstantCase,                value: UPPER_CASE }
  - { key: readability-identifier-naming.StaticConstantPrefix,              value: 's_' }
  - { key: readability-identifier-naming.StaticVariableCase,                value: camelBack }
  - { key: readability-identifier-naming.StaticVariablePrefix,              value: 's_' }
  - { key: readability-identifier-naming.StructCase,                        value: CamelCase }
  - { key: readability-identifier-naming.TemplateParameterCase,             value: CamelCase }
  - { key: readability-identifier-naming.TypeAliasCase,                     value: CamelCase }
  - { key: readability-identifier-naming.UnionCase,                         value: CamelCase }
  - { key: readability-identifier-naming.VariableCase,                      value: camelBack }
  - { key: readability-identifier-naming.VirtualMethodCase,                 value: CamelCase }

  - { key: readability-implicit-bool-conversion.AllowIntegerConditions,     value: '1' }
  - { key: readability-implicit-bool-conversion.AllowPointerConditions,     value: '1' }

  - { key: cert-oop54-cpp.WarnOnlyIfThisHasSuspiciousField,                 value: '0' }
  - { key: google-readability-braces-around-statements.ShortStatementLines, value: '1' }
  - { key: google-readability-function-size.StatementThreshold,             value: '800' }
  - { key: google-readability-namespace-comments.ShortNamespaceLines,       value: '10' }
  - { key: llvm-namespace-comment.ShortNamespaceLines,                      value: '10' }
  - { key: google-readability-namespace-comments.SpacesBeforeComments,      value: '1' }
  - { key: llvm-namespace-comment.SpacesBeforeComments,                     value: '1' }
  - { key: modernize-loop-convert.MaxCopySize,                              value: '16' }
  - { key: modernize-loop-convert.MinConfidence,                            value: reasonable }
  - { key: modernize-loop-convert.NamingStyle,                              value: CamelCase }
  - { key: modernize-pass-by-value.IncludeStyle,                            value: llvm }
  - { key: modernize-replace-auto-ptr.IncludeStyle,                         value: llvm }
  - { key: misc-include-cleaner.IgnoreHeaders,                              value: 'GL/.*;vivid/.*;goom_config\.h' }
